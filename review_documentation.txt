- Logic errors, formatation and best practices.
Removed unnecessary returns.
Breaklines fixes.
Removed unnecessary files Character.cs Grid.cs in root.
Added access modifiers in variables, class and functions. Avoid use implicit declaration.
Removed \n in writeline to choose class.
Removed a switch statement to create PlayerCharacter, instead parse input to an int and check if is between [min, max].
Started function name with capital case in function DrawBattlefield.
Variables starting with lower case. (arguments in constructor of Grid)
Removed unused variables playerCharacterClass, PlayerCurrentLocation and EnemyCurrentLocation from Program.cs.
Removed $ from Write where dont need a special format, optimization.
Removed if statement in StartTurn function, and randomized first player in StartGame function.
Removed this keyword in StartTurn function to variable currentBox, this keyword is necessary only if are a local and class scope variable with same name.



- Architecture System
Implemented Factory Design Pattern to Characters/Class.
  Encapsulated some properties from Character that makes sense to be defined only in instantiation.

Encapsulated Index from GridBox, set is private now and a property too.

Changed type of AutoBattle.Type from class to namespace.
Moved some functions related gameplay system to a exclusive class, GameSystem.cs

Moved some functions related to Input player to a exclusive class, InputSystem.cs.
	Added in InputSystem.cs functions specific to read number, string, and etc.

Moved GetRandomInt to a class Utils.cs and used this where get a random.
Removed some functions calls nested to decrease stack.
Removed arguments lines and columns from function DrawBattlefield, now draw whole field.
Added a GridsCount property instead use property .Count from List<Grid>.

Extract method Walk to execute a movement in a Grid.


Bug fixed
Draw called before movement when char walked to up.
When player move to down was inverted definition of flag occupied.
Inverted x/y correlation with line/collumns in Grid constructor.
If player goes to last grid and next move was to left, player was locked.
Character doing two moves one per axis in one turn, now it's once and prioritizing the axis closest to the opponent.
Fixed checking of characters in range attack.



Discussion:
I thought about algorithm to allocate player/enemy in battlefield chosing a random grid and checking if is empty,
for now it's a better way, but if amount players increase significantly, maybe use a algorithm with a list of empties grid is better.